#! /usr/bin/env python3


import configparser
import contextlib
import re
import subprocess
import sys


REDSHIFT = "redshift"
CURRENT_TEMP_RE = re.compile(r"^Color temperature: (\d+)K$", flags=re.MULTILINE)

MIN_TEMP = 3000
MAX_TEMP = 6500


#def current_temperature():
#    output = subprocess.check_output([REDSHIFT, "-p"], encoding="utf-8")
#    match = CURRENT_TEMP_RE.search(output)
#    if match is None:
#        raise RuntimeError("Could not read temperature", output)
#    return int(match.group(1))


def set_temperature(temperature):
    subprocess.check_call([REDSHIFT, "-P", "-x", "-O", str(temperature)])


@contextlib.contextmanager
def scale(): #current):
    #current = max(MIN_TEMP, current)
    #current = min(current, MAX_TEMP)
    cmd = ["zenity", "--scale", "--print-partial"]
    cmd += ["--min-value", str(MIN_TEMP)]
    cmd += ["--max-value", str(MAX_TEMP)]
    cmd += ["--value", str(MAX_TEMP)]
    cmd += ["--step", "500"]
    print(cmd)
    with subprocess.Popen(cmd, encoding="utf-8", stdout=subprocess.PIPE) as proc:
        yield proc.stdout


def main():
    #temp = current_temperature()
    with scale() as output:
        for line in output:
            temp = int(line.rstrip())
            print(temp)
            set_temperature(temp)



if __name__ == "__main__":
    main()

