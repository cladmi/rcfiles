#! /usr/bin/env python3


import configparser
import contextlib
import re
import subprocess
import sys


REDSHIFT = "redshift"
CURRENT_TEMP_RE = re.compile(r"^Color temperature: (\d+)K$", flags=re.MULTILINE)

MIN_TEMP = 1500
DEFAULT_TEMP = 4500
MAX_TEMP = 6500
STEP = 500


def current_temperature():
    output = subprocess.check_output([REDSHIFT, "-p"], encoding="utf-8")
    match = CURRENT_TEMP_RE.search(output)
    if match is None:
        raise RuntimeError("Could not read temperature", output)
    return int(match.group(1))


def set_temperature(temperature):
    subprocess.check_call([REDSHIFT, "-P", "-x", "-O", str(temperature)])


def kill_redshift():
    subprocess.call(["pkill", "-f", "/usr/bin/redshift"])


@contextlib.contextmanager
def scale():
    # Does not work
    # current = current_temperature()
    # current = min(max(MIN_TEMP, current), MAX_TEMP)
    # print(current)

    cmd = ["yad"]
    cmd += ["--title=Redshift Temperature"]
    cmd += ["--scale", "--print-partial"]
    cmd += ["--min-value", str(MIN_TEMP)]
    cmd += ["--max-value", str(MAX_TEMP)]
    cmd += ["--step", f"{STEP}"]

    cmd += ["--value", f"{DEFAULT_TEMP}"]
    cmd += ["--enforce-step"]

    cmd += ["--splash"]

    for value in [MIN_TEMP, DEFAULT_TEMP, MAX_TEMP]:
        cmd += ["--mark", f"{value}K:{value}"]
    for value in range(MIN_TEMP, MAX_TEMP + 1, STEP):
        cmd += ["--mark", f":{value}"]

    print(cmd)
    with subprocess.Popen(cmd, encoding="utf-8", stdout=subprocess.PIPE) as proc:
        yield proc.stdout


def main():
    kill_redshift()
    with scale() as output:
        for line in output:
            temp = int(line.rstrip())
            print(temp)
            set_temperature(temp)



if __name__ == "__main__":
    main()

